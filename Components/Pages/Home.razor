@page "/"
@using System.Collections.Generic
@rendermode InteractiveServer

<h1 class ="title">All Blogs</h1> 

<div class="container">
    <div class="left-side">
        @foreach (var blog in Blogs)
        {
            <div class="blog-item @(blog.Id == selectedBlogId ? "selected" : "")" @onclick="() => SelectBlog(blog.Id)">
                <img src="@blog.ImageUrl" alt="@blog.Title">
                <h2>@blog.Title</h2>
                <p>@blog.Preview</p>
            </div>
        }
    </div>

    <div class="right-side">
        @if (selectedBlogId != 0)  // If a blog is selected, display its details
        {
            <h1 class="blog-title">@selectedBlog.Title</h1>  // Display the selected blog's title
            <img src="@selectedBlog.ImageUrl" alt="@selectedBlog.Title">
            <p class="text-under-image">@selectedBlog.Content</p>  // Display the selected blog's content
        }
        else
        {
            <p>Select a blog to read</p>  // Display this message if no blog is selected
        }
    </div>
</div>

<style>
    h1:first-of-type {
        text-align: center;
    }

    body {
        font-family: Titillium web, sans-serif;
        margin: 0;
        padding: 0;
        box-sizing: border-box;
    }

    .container {
        display: flex;
        height: 100vh;
    }

    .left-side {
        width: 25%;
        overflow-y: auto;  /*Scrollable if content overflows vertically*/
        padding: 10px;  /*Padding inside the left side*/
        border-right: solid 1px #1A5319;
        padding-bottom: 400px;
    }

    .right-side {
        width: 75%;
        overflow-y: auto;  /*Scrollable if content overflows vertically*/
        padding: 20px;  /*Padding inside the right side*/
        margin: 50px;
        margin-left: 50px;
        font-size: 24px;
        max-width: 50%;
        padding-bottom: 400px;
    }

    .blog-item {
        margin-bottom: 20px;
        cursor: pointer;
        padding: 10px;
        border: 1px solid transparent;
    }

    .blog-item img {
        width: 100%;
        height: auto;
    }

    .blog-item h2 {
        margin: 10px 0;
    }

    .blog-item p {
        margin: 0;
    }
    
    .blog-title {
        padding: 30px;
    }

    .selected {
        border: 2px solid #007BFF;
        border-radius: 15px;
    }
    
    img {
        max-width: 100%;
        height: auto;
        border-radius:  10px;
    }
    
    .title {
        text-align:  center;
        font-size: 48px;
        padding:  50px;
        border-bottom:  solid 2px #1A5319;
    }
    
    .text-under-image{
        margin-top: 30px;
    }
</style>

@code {
    // List of blogs to display
    private List<Blog> Blogs = new List<Blog>
    {
        new Blog
        {
            Id = 1, 
            Title = "Jazz Music: The Origins, Evolution, and Key Figures", 
            Preview = "An insightful look into the origins and evolution of jazz music, highlighting key figures who have shaped the genre.", 
            Content = "Jazz music originated in the late 19th and early 20th centuries in the United States, with roots in African American musical traditions, blues, and ragtime. New Orleans is often considered the birthplace of jazz, where musicians blended these influences to create a new and improvisational style of music. Louis Armstrong, a trumpeter and vocalist, was one of the early pioneers who brought jazz to a wider audience with his virtuosic playing and charismatic performances. The Swing Era of the 1930s and 1940s saw the rise of big bands and bandleaders like Duke Ellington and Count Basie, who popularized jazz with their sophisticated arrangements and energetic performances. The bebop movement of the 1940s and 1950s, led by artists like Charlie Parker and Dizzy Gillespie, introduced more complex harmonies and rhythms, pushing jazz into new and innovative directions. Miles Davis, a trumpeter and bandleader, played a significant role in the evolution of jazz, from his work in bebop to his pioneering efforts in cool jazz, modal jazz, and jazz fusion. The genre continues to evolve, with contemporary jazz artists like Herbie Hancock, Wynton Marsalis, and Kamasi Washington pushing the boundaries of jazz and keeping the tradition alive. Jazz remains a dynamic and influential genre, celebrated for its rich history and its ongoing innovation.", 
            ImageUrl = "images/BlogThumbnail9.jpg"
        },
        new Blog
        {
            Id = 2, 
            Title = "Responsive Web Design: Best Practices and Techniques", 
            Preview = "In-depth tips and techniques for creating websites that look great and function seamlessly on any device, ensuring a consistent user experience.", 
            Content = "Responsive web design is essential in today's multi-device world. Users access websites from a variety of devices, including desktops, laptops, tablets, and smartphones. Ensuring your website looks and functions well on all these devices is crucial for providing a positive user experience. Here are some best practices and techniques to achieve responsive web design. Fluid grids use a flexible grid layout that adjusts based on the screen size. Instead of fixed pixel values, use relative units like percentages. This allows your layout to adapt smoothly to different screen widths. Flexible images ensure images resize within their containing elements. Use CSS to set the maximum width of images to 100%, ensuring they scale down if the container is smaller than the image's original size. This prevents images from overflowing their containers on smaller screens. Media queries apply different styles based on device characteristics using media queries. Media queries allow you to define specific CSS rules that apply only when certain conditions are met, such as screen width or orientation. This enables you to create tailored styles for various devices. Mobile-first design starts by designing for mobile devices and scales up. A mobile-first approach ensures that your website provides a solid experience on smaller screens and progressively enhances as the screen size increases. This often results in cleaner, more efficient code and a better user experience across all devices. Include the viewport meta tag in your HTML to control the layout on mobile browsers. This tag instructs the browser on how to adjust the page's dimensions and scaling, ensuring it fits well on small screens. Make sure interactive elements like buttons and links are large enough to be easily tapped on touch devices. Follow accessibility guidelines to ensure sufficient spacing and clear visual cues. Optimize your website's performance to ensure fast loading times on all devices. Compress images, minify CSS and JavaScript files, and leverage browser caching to reduce the amount of data that needs to be loaded. By following these best practices and techniques, you can create a responsive web design that provides a seamless and enjoyable experience for users on any device.", 
            ImageUrl = "images/BlogThumbnail2.jpg"
        },
        new Blog
        {
            Id = 3, 
            Title = "The Evolution of Web Development: From HTML to Modern Frameworks", 
            Preview = "A comprehensive journey through the history of web development, highlighting key milestones and technological advancements that have shaped the internet as we know it today.", 
            Content = "The web has evolved dramatically since its inception. The early days of web development began with simple HTML pages, where websites were nothing more than static documents. HTML, or HyperText Markup Language, provided the basic structure, allowing developers to create headings, paragraphs, and links. In the late 1990s, CSS (Cascading Style Sheets) was introduced, revolutionizing the way websites were designed. CSS allowed developers to separate content from design, enabling more complex and visually appealing layouts. This separation made it easier to maintain and update the look and feel of websites. The next significant leap came with the introduction of JavaScript in 1995. JavaScript brought interactivity to the web, enabling features like form validation, dynamic content updates, and interactive animations. This transformed static pages into dynamic and engaging experiences. As the web continued to grow, so did the need for more powerful tools and frameworks. The mid-2000s saw the rise of AJAX (Asynchronous JavaScript and XML), which allowed web pages to update asynchronously without reloading the entire page. This paved the way for more responsive and faster web applications. Fast forward to the present day, we now have an array of powerful frameworks and libraries like React, Angular, and Vue.js. These tools simplify complex tasks, improve developer productivity, and enable the creation of sophisticated single-page applications (SPAs). Additionally, server-side technologies like Node.js have allowed JavaScript to be used for both front-end and back-end development, further streamlining the development process. The evolution of web development continues with the rise of WebAssembly, Progressive Web Apps (PWAs), and advanced APIs that provide more capabilities to web applications. The future holds exciting possibilities as the web continues to innovate and grow.", 
            ImageUrl = "images/BlogThumbnail1.jpg"
        },
        new Blog
        {
            Id = 4, 
            Title = "Top 10 Web Development Tools for 2024", 
            Preview = "A detailed list of essential tools and resources for web developers in 2024, highlighting their features and how they can enhance your workflow.", 
            Content = "Staying up-to-date with the latest tools can significantly boost your productivity as a web developer. In 2024, several tools stand out for their ability to streamline development processes, enhance collaboration, and improve code quality. Here are the top 10 tools every web developer should consider using. Visual Studio Code is a versatile and powerful code editor from Microsoft, beloved by developers for its rich feature set and extensive extensions marketplace. It supports a wide range of programming languages, offers built-in Git integration, and features IntelliSense for smart code completions. GitHub Copilot is an AI-powered code completion tool developed by GitHub and OpenAI. GitHub Copilot helps you write code faster by suggesting entire lines or blocks of code based on the context. It's integrated directly into Visual Studio Code, making it easy to use while you code. Figma is a collaborative interface design tool essential for designers and developers working together on UI or UX projects. Its real-time collaboration features allow teams to work on designs simultaneously, and its prototyping capabilities make it easy to create interactive mockups. Postman simplifies API development and testing. Postman allows you to create, test, and document APIs. Its intuitive interface and powerful features, such as automated testing and mock servers, make it a must-have for backend and frontend developers. Webpack is a powerful module bundler essential for modern web development. Webpack helps you manage and bundle your JavaScript, CSS, and other assets, optimizing your application for better performance. Its plugin system allows for extensive customization and automation of build processes. Tailwind CSS is a utility-first CSS framework that provides a set of pre-defined classes that can be combined to build custom designs without writing custom CSS. It promotes a rapid development workflow and helps maintain consistent styling across projects. Docker containerizes your applications for consistent environments. Docker allows you to package applications and their dependencies into containers, ensuring they run consistently across different environments. This is particularly useful for development, testing, and deployment. Jest is a delightful JavaScript testing framework that makes it easy to write and run tests for your JavaScript code. Its features include zero configuration setup, powerful mocking capabilities, and an intuitive API. Jest integrates seamlessly with other popular tools and frameworks. Vite is a fast and efficient build tool designed for modern web development. Vite offers instant server start, lightning-fast hot module replacement, and optimized build output. Its performance and simplicity make it an excellent choice for both small and large projects. Netlify simplifies deployment and hosting of web projects. Netlify offers continuous deployment, serverless functions, and a powerful CDN. Netlify's seamless integration with Git repositories and its intuitive interface make it easy to deploy and manage your web applications. These tools can help streamline your development workflow, enhance collaboration, and improve the quality of your code. By leveraging these resources, you can stay ahead of the curve and build better, more efficient web applications in 2024.", 
            ImageUrl = "images/BlogThumbnail5.jpg"
        },
        new Blog
        {
            Id = 5, 
            Title = "JavaScript ES6 Features Every Developer Should Know", 
            Preview = "An in-depth overview of essential ES6 features that have revolutionized JavaScript development, making it more powerful and easier to use.", 
            Content = "ES6, also known as ECMAScript 2015, introduced several powerful features to JavaScript that have greatly improved the language's usability and functionality. These features enable developers to write cleaner, more efficient, and more maintainable code. Here are some of the most important ES6 features that every developer should know. Arrow functions provide a more concise syntax for writing functions. They also lexically bind the this value, making them particularly useful for callbacks and methods in object-oriented programming. Arrow functions simplify the syntax and avoid issues with the this keyword in JavaScript. ES6 introduced block-scoped variables with let and constants with const. These new keywords provide better control over variable scope and prevent issues related to variable hoisting and reassignment. Let is used for variables that need to be reassigned, while const is used for variables that should remain constant. Template literals offer enhanced string interpolation and multi-line strings, making it easier to construct complex strings and include variables. This feature allows for cleaner and more readable code when working with strings. Destructuring allows you to easily extract values from arrays and objects and assign them to variables. This feature simplifies working with complex data structures and reduces the need for repetitive code. Promises provide a better way to handle asynchronous operations, replacing the traditional callback pattern. They make it easier to manage asynchronous code and avoid callback hell. Promises offer methods like then and catch for chaining and handling asynchronous results. ES6 introduced classes, providing a more intuitive syntax for object-oriented programming in JavaScript. Classes make it easier to define and work with objects and inheritance. ES6 modules allow you to split your code into separate files and import or export functionalities as needed. This promotes better code organization and reuse. Understanding and utilizing these ES6 features can greatly improve your JavaScript code quality and efficiency. They offer more expressive syntax, better scoping, and modern approaches to handle common programming tasks.", 
            ImageUrl = "images/BlogThumbnail3.jpg"
        },
        new Blog
        {
            Id = 6, 
            Title = "The Evolution of Rock Music: From Elvis to Modern Rock", 
            Preview = "A comprehensive journey through the history of rock music, highlighting key milestones and influential artists who shaped the genre.", 
            Content = "Rock music has undergone a significant evolution since its inception in the 1950s. It began with the emergence of rock and roll, a genre that combined elements of blues, jazz, and country music. Artists like Elvis Presley, Chuck Berry, and Little Richard were among the pioneers who popularized rock and roll, bringing it to mainstream audiences. In the 1960s, rock music evolved with the British Invasion, led by bands such as The Beatles and The Rolling Stones. This era saw the birth of psychedelic rock, characterized by experimental sounds and unconventional song structures. The late 1960s and early 1970s marked the rise of hard rock and heavy metal, with bands like Led Zeppelin, Black Sabbath, and Deep Purple pushing the boundaries of the genre with powerful guitar riffs and intense vocals. The punk rock movement of the late 1970s brought a raw and rebellious energy to rock music, with bands like The Ramones, Sex Pistols, and The Clash leading the charge. The 1980s saw the emergence of alternative rock and the rise of iconic bands such as Nirvana, U2, and R.E.M. Modern rock continues to evolve, incorporating diverse influences from various genres, and remains a vibrant and dynamic form of musical expression.", 
            ImageUrl = "images/BlogThumbnail6.jpg"
        },
        new Blog
        {
            Id = 7, 
            Title = "Understanding Classical Music: Key Composers and Their Masterpieces", 
            Preview = "An in-depth look at classical music, exploring the works of key composers and their contributions to the genre.", 
            Content = "Classical music is a genre with a rich history and a vast repertoire of works composed by some of the greatest musical minds in history. One of the earliest and most influential composers of the Baroque period was Johann Sebastian Bach, whose compositions such as the Brandenburg Concertos and The Well-Tempered Clavier remain essential works in classical music. The Classical period brought forth composers like Wolfgang Amadeus Mozart, known for his operas, symphonies, and chamber music. His works, including The Magic Flute and Symphony No. 40, are celebrated for their clarity, balance, and form. Ludwig van Beethoven, a pivotal figure in the transition from the Classical to the Romantic period, composed some of the most iconic pieces in classical music, such as the Ninth Symphony and Moonlight Sonata. The Romantic era saw composers like Franz Schubert, whose lieder and symphonies are known for their emotional depth, and Pyotr Ilyich Tchaikovsky, whose ballets like The Nutcracker and Swan Lake remain popular to this day. Understanding the contributions of these key composers provides a deeper appreciation of the classical music genre and its lasting impact on the world of music.", 
            ImageUrl = "images/BlogThumbnail7.jpg"
        },
        new Blog
        {
            Id = 8, 
            Title = "Exploring World Music: Diverse Sounds from Around the Globe", 
            Preview = "A journey through the diverse sounds and cultural significance of world music, highlighting various regional styles and artists.", 
            Content = "World music encompasses a vast array of musical traditions and styles from different cultures and regions around the globe. Each style carries its own unique characteristics, instruments, and cultural significance. African music, for example, is known for its rich rhythms, complex polyrhythms, and traditional instruments like the djembe and kora. Artists like Fela Kuti and Ali Farka Touré have brought African music to international audiences, showcasing its vibrant energy and cultural depth. Latin American music, including genres like salsa, samba, and tango, is characterized by its lively rhythms and passionate performances. Icons like Celia Cruz, Carlos Gardel, and João Gilberto have made significant contributions to these genres, blending traditional sounds with modern influences. Indian classical music, with its intricate ragas and talas, has a long history and deep spiritual significance. Renowned artists like Ravi Shankar and L. Subramaniam have introduced the world to the beauty and complexity of Indian music. Middle Eastern music features unique scales and modes, as well as traditional instruments like the oud and qanun. Artists like Fairuz and Omar Faruk Tekbilek have popularized Middle Eastern music, highlighting its rich heritage and emotional expressiveness. Exploring world music allows us to appreciate the diversity of musical expression and the cultural stories embedded within each genre, offering a broader understanding of the human experience through sound.", 
            ImageUrl = "images/BlogThumbnail10.jpg"
        },
        new Blog
        {
            Id = 9, 
            Title = "The Rise of Electronic Music: From Synthesizers to EDM", 
            Preview = "A detailed exploration of the history and evolution of electronic music, from early synthesizers to the modern EDM scene.", 
            Content = "Electronic music has come a long way since its early beginnings in the mid-20th century. The advent of synthesizers in the 1960s and 1970s revolutionized music production, allowing artists to create new sounds and textures. Pioneers like Kraftwerk and Jean-Michel Jarre used synthesizers to produce innovative electronic music that laid the groundwork for future genres. The 1980s saw the rise of electronic dance music (EDM), with subgenres such as house, techno, and trance gaining popularity in nightclubs and rave scenes around the world. Artists like Frankie Knuckles, Derrick May, and Paul Oakenfold were instrumental in shaping the EDM landscape during this time. The 1990s and 2000s witnessed the explosion of electronic music into mainstream culture, with artists like Daft Punk, The Prodigy, and Tiësto achieving international success. The advent of digital audio workstations (DAWs) and advancements in technology made music production more accessible, leading to a surge in electronic music producers and DJs. Today, electronic music continues to evolve, with genres like dubstep, future bass, and trap pushing the boundaries of sound and creativity. The global popularity of EDM festivals such as Tomorrowland and Ultra Music Festival highlights the enduring appeal and dynamic nature of electronic music.", 
            ImageUrl = "images/BlogThumbnail8.jpg"
        },
        new Blog
        {
            Id = 10, 
            Title = "Getting Started with Blazor: A Beginner's Guide", 
            Preview = "An introductory guide to Blazor, a framework for building interactive web UIs with C#, including setup, key concepts, and practical examples.", 
            Content = "Blazor is a powerful framework that allows developers to build interactive web applications using C#. It brings the power of .NET to the web, enabling full-stack development with a single language. Here's a step-by-step guide to getting started with Blazor. To start building Blazor applications, you need to install the .NET SDK. You can download it from the official .NET website. Once installed, create a new Blazor project using the command line. This creates a Blazor Server application and starts a development server. Open your browser and navigate to see your new Blazor app in action. Blazor applications are built using components. Components are the building blocks of a Blazor application, encapsulating UI and logic. A component is typically defined in a .razor file. Blazor supports two-way data binding, allowing you to synchronize data between the UI and the underlying model. This is useful for creating forms and interactive components. Handling user events like clicks and form submissions is straightforward in Blazor. You can bind event handlers directly in your components. Blazor supports routing, allowing you to navigate between different pages in your application. You can define routes using the @page directive and use the NavLink component for navigation. Blazor integrates seamlessly with .NET's dependency injection system. You can register and inject services into your components, promoting modularity and testability. Blazor offers a seamless development experience for C# developers looking to build modern web applications. Its component-based architecture, rich set of features, and integration with .NET make it a powerful choice for web development.", 
            ImageUrl = "images/BlogThumbnail4.jpg"
        }

    };

    // ID of the selected blog, 0 means no blog is selected
    private int selectedBlogId = 0;
    // The selected blog object
    private Blog selectedBlog;

    // Method to select a blog by its ID
    private void SelectBlog(int blogId)
    {
        selectedBlogId = blogId;  // Set the selected blog ID
        selectedBlog = Blogs.FirstOrDefault(b => b.Id == blogId);  // Find the selected blog in the list
        StateHasChanged();  // Ensure the component re-renders
    }

    // Blog class representing a single blog post
    private class Blog
    {
        public int Id { get; set; }
        public string Title { get; set; }
        public string Preview { get; set; }
        public string Content { get; set; }
        public string ImageUrl { get; set; }
    }
}
